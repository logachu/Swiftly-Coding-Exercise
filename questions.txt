
> Manager's Specials change periodically; at any moment a store manager could decide to add or remove a product

What is there a hard requirement for freshness? e.g. "Manager's Specials must not be more than 5 minutes out of date." Does the server support any way to push updates to clients to avoid polling? Websockets? Longpolling?
I'd rather not DOS attack the endpoint by polling continuously to ensure fresh data. Typically if the freshness requirement is loose enough. I would prefetch the data from the server once when the previous screen of the app is first viewed or if the app was just foregrounded. Then I would assume that the user is not going to spend alot of time on this page so it would not be necessary to refresh the data continuously while its being viewed. However, this approach means it is possible that the data is updated while the screen is being viewed but the client would not be aware of the update and still show stale data.

> The products must be displayed in the order they are provided

Can I assume the order of an acceptable layout is in left-to-right rows arranged top-to-bottom?

This limits the possible layouts for tiling neatly depending out how strict the correct order is defined. Assuming the server-side has not already made any effort to generate an effective layout and the bounding boxes could have arbitrary width and height in canvasUnits, then a custom layout would be required here. (On iOS, I would use a custom UICollectionViewLayout.) "Must be displayed in the order they are provided" is a little ambiguous. I'm assuming its most natural for the items to be be laid out in rows left-to-right with rows top-to-bottom (Flow layout in iOS collection view terms). However that approach would result in Layout B below yet I think any designer (or user) would prefer Layout A and consider the order "close enough".

For this (simplified) JSON:

{ "1" : { width: 1, height: 1},
  "2" : { width: 1, height: 1},
  "3" : { width: 1, height: 3}}

Two possible layouts for a 2 canvasUnit wide device:

Layout A         Layout B
+---+---+---+       +---+---+---+
| 1 |   | 3 |       | 1 |   | 3 |
+---+ 2 +---+  vs.  +---+ 2 +---+
| 4 |   | 5 |           |   |
+---+---+---+       +---+---+
                    | 4 | 5 |
		    +---+---+
		    

I'm game to try to make a better layout algorithm on the client vs a straight flow layout (fun!) although I believe this kind of logic belongs on the server. The simpler the client is, the less likely to ship bugs that are difficult claw back in a mobile world where updating an app takes a lot longer than reloading a web page. If I discovered my layout algorithm wasn't working well on today's specials, I'd rather quickly push a server-side fix than go through the overhead of pushing a mobile release for both Android and iOS and waiting for the Apple Review process before it can go live, then hoping users will update the app sometime soon.
